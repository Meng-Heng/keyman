#include <CompMsg.h>
#include <map>

std::map<KMX_DWORD, const KMX_CHAR*> CompilerErrorMap = {
    { KmnCompilerMessages::ERROR_InvalidLayoutLine                             , "Invalid 'layout' command"},
    { KmnCompilerMessages::ERROR_NoVersionLine                                 , "No version line found for file"},
    { KmnCompilerMessages::ERROR_InvalidGroupLine                              , "Invalid 'group' command"},
    { KmnCompilerMessages::ERROR_InvalidStoreLine                              , "Invalid 'store' command"},
    { KmnCompilerMessages::ERROR_InvalidCodeInKeyPartOfRule                    , "Invalid command or code found in key part of rule"},
    { KmnCompilerMessages::ERROR_InvalidDeadkey                                , "Invalid 'deadkey' or 'dk' command"},
    { KmnCompilerMessages::ERROR_InvalidValue                                  , "Invalid value in extended string"},
    { KmnCompilerMessages::ERROR_ZeroLengthString                              , "A string of zero characters was found"},
    { KmnCompilerMessages::ERROR_TooManyIndexToKeyRefs                         , "Too many index commands refering to key string"},
    { KmnCompilerMessages::ERROR_UnterminatedString                            , "Unterminated string in line"},
    { KmnCompilerMessages::ERROR_StringInVirtualKeySection                     , "extend string illegal in virtual key section"},
    { KmnCompilerMessages::ERROR_AnyInVirtualKeySection                        , "'any' command is illegal in virtual key section"},
    { KmnCompilerMessages::ERROR_InvalidAny                                    , "Invalid 'any' command"},
    { KmnCompilerMessages::ERROR_StoreDoesNotExist                             , "Store referenced does not exist"},
    { KmnCompilerMessages::ERROR_BeepInVirtualKeySection                       , "'beep' command is illegal in virtual key section"},
    { KmnCompilerMessages::ERROR_IndexInVirtualKeySection                      , "'index' command is illegal in virtual key section"},
    { KmnCompilerMessages::FATAL_BadCallParams                                 , "CompileKeyboardFile was called with bad parameters"},
    { KmnCompilerMessages::ERROR_InfileNotExist                                , "Cannot find the input file"},
    // { KmnCompilerMessages::ERROR_CannotCreateOutfile                           , "Cannot open output file for writing"}, unused
    // { KmnCompilerMessages::FATAL_UnableToWriteFully                            , "Unable to write the file completely"}, unused
    { KmnCompilerMessages::ERROR_CannotReadInfile                              , "Cannot read the input file"},
    { KmnCompilerMessages::FATAL_SomewhereIGotItWrong                          , "Internal error: contact Keyman"},
    { KmnCompilerMessages::FATAL_BufferOverflow                                , "The compiler memory buffer overflowed"},
    // { KmnCompilerMessages::FATAL_Break                                         , "Compiler interrupted by user"}, unused
    { KmnCompilerMessages::FATAL_CannotAllocateMemory                          , "Out of memory"},
    { KmnCompilerMessages::ERROR_InvalidBitmapLine                             , "Invalid 'bitmaps' command"},
    { KmnCompilerMessages::ERROR_CannotReadBitmapFile                          , "Cannot open the bitmap or icon file for reading"},
    { KmnCompilerMessages::ERROR_IndexDoesNotPointToAny                        , "An index() in the output does not have a corresponding any() statement"},
    { KmnCompilerMessages::ERROR_ReservedCharacter                             , "A reserved character was found"},
    { KmnCompilerMessages::ERROR_InvalidCharacter                              , "A character was found that is outside the valid Unicode range (U+0000 - U+10FFFF)"},
    { KmnCompilerMessages::ERROR_InvalidCall                                   , "The 'call' command is invalid"},
    { KmnCompilerMessages::ERROR_CallInVirtualKeySection                       , "'call' command is illegal in virtual key section"},
    { KmnCompilerMessages::ERROR_CodeInvalidInKeyStore                         , "The command is invalid inside a store that is used in a key part of the rule"},
    { KmnCompilerMessages::ERROR_CannotLoadIncludeFile                         , "Cannot load the included file: it is either invalid or does not exist"},
    { KmnCompilerMessages::ERROR_60FeatureOnly_EthnologueCode                  , "EthnologueCode system store requires VERSION 6.0 or higher"},
    { KmnCompilerMessages::ERROR_60FeatureOnly_MnemonicLayout                  , "MnemonicLayout functionality requires VERSION 6.0 or higher"},
    { KmnCompilerMessages::ERROR_60FeatureOnly_OldCharPosMatching              , "OldCharPosMatching system store requires VERSION 6.0 or higher"},
    { KmnCompilerMessages::ERROR_60FeatureOnly_NamedCodes                      , "Named character constants requires VERSION 6.0 or higher"},
    { KmnCompilerMessages::ERROR_60FeatureOnly_Contextn                        , "Context(n) requires VERSION 6.0 or higher"},
    { KmnCompilerMessages::ERROR_501FeatureOnly_Call                           , "Call() requires VERSION 5.01 or higher"},
    { KmnCompilerMessages::ERROR_InvalidNamedCode                              , "Invalid named code constant"},
    { KmnCompilerMessages::ERROR_InvalidSystemStore                            , "Invalid system store name found"},
    { KmnCompilerMessages::ERROR_60FeatureOnly_VirtualCharKey                  , "Virtual character keys require VERSION 6.0 or higher"},
    { KmnCompilerMessages::ERROR_VersionAlreadyIncluded                        , "Only one VERSION or store(version) line allowed in a source file."},
    { KmnCompilerMessages::ERROR_70FeatureOnly                                 , "This feature requires store(version) '7.0' or higher"},
    { KmnCompilerMessages::ERROR_80FeatureOnly                                 , "This feature requires store(version) '8.0' or higher"},
    { KmnCompilerMessages::ERROR_InvalidInVirtualKeySection                    , "This statement is not valid in a virtual key section"},
    { KmnCompilerMessages::ERROR_InvalidIf                                     , "The if() statement is not valid"},
    { KmnCompilerMessages::ERROR_InvalidReset                                  , "The reset() statement is not valid"},
    { KmnCompilerMessages::ERROR_InvalidSet                                    , "The set() statement is not valid"},
    { KmnCompilerMessages::ERROR_InvalidSave                                   , "The save() statement is not valid"},
    { KmnCompilerMessages::ERROR_InvalidEthnologueCode                         , "Invalid ethnologuecode format"},
    { KmnCompilerMessages::ERROR_90FeatureOnly_IfSystemStores                  , "if(store) requires store(version) '9.0' or higher"},
    { KmnCompilerMessages::ERROR_IfSystemStore_NotFound                        , "System store in if() not found"},
    { KmnCompilerMessages::ERROR_90FeatureOnly_SetSystemStores                 , "set(store) requires store(version) '9.0' or higher"},
    { KmnCompilerMessages::ERROR_SetSystemStore_NotFound                       , "System store in set() not found"},
    { KmnCompilerMessages::ERROR_90FeatureOnlyVirtualKeyDictionary             , "Custom virtual key names require store(version) '9.0'"},
    { KmnCompilerMessages::ERROR_InvalidIndex                                  , "Invalid 'index' command"},
    { KmnCompilerMessages::ERROR_OutsInVirtualKeySection                       , "'outs' command is illegal in virtual key section"},
    { KmnCompilerMessages::ERROR_InvalidOuts                                   , "Invalid 'outs' command"},
    { KmnCompilerMessages::ERROR_ContextInVirtualKeySection                    , "'context' command is illegal in virtual key section"},
    { KmnCompilerMessages::ERROR_InvalidUse                                    , "Invalid 'use' command"},
    { KmnCompilerMessages::ERROR_GroupDoesNotExist                             , "Group does not exist"},
    { KmnCompilerMessages::ERROR_VirtualKeyNotAllowedHere                      , "Virtual key is not allowed here"},
    { KmnCompilerMessages::ERROR_InvalidSwitch                                 , "Invalid 'switch' command"},
    { KmnCompilerMessages::ERROR_NoTokensFound                                 , "No tokens found in line"},
    { KmnCompilerMessages::ERROR_InvalidLineContinuation                       , "Invalid line continuation"},
    { KmnCompilerMessages::ERROR_LineTooLong                                   , "Line too long"},
    { KmnCompilerMessages::ERROR_InvalidCopyright                              , "Invalid 'copyright' command"},
    { KmnCompilerMessages::ERROR_CodeInvalidInThisSection                      , "This line is invalid in this section of the file"},
    { KmnCompilerMessages::ERROR_InvalidMessage                                , "Invalid 'message' command"},
    { KmnCompilerMessages::ERROR_InvalidLanguageName                           , "Invalid 'languagename' command"},
    { STATUS_EndOfFile                                     , "(no error - reserved code)"},
    { KmnCompilerMessages::ERROR_InvalidToken                                  , "Invalid token found"},
    { KmnCompilerMessages::ERROR_InvalidBegin                                  , "Invalid 'begin' command"},
    { KmnCompilerMessages::ERROR_InvalidName                                   , "Invalid 'name' command"},
    { KmnCompilerMessages::ERROR_InvalidVersion                                , "Invalid 'version' command"},
    { KmnCompilerMessages::ERROR_InvalidLanguageLine                           , "Invalid 'language' command"},
    { KmnCompilerMessages::ERROR_LayoutButNoLanguage                           , "Layout command found but no language command"},
    { KmnCompilerMessages::FATAL_CannotCreateTempfile                          , "Cannot create temp file"},
    { KmnCompilerMessages::ERROR_90FeatureOnlyLayoutFile                       , "Touch layout file reference requires store(version) '9.0' or higher"},
    { KmnCompilerMessages::ERROR_90FeatureOnlyKeyboardVersion                  , "KeyboardVersion system store requires store(version) '9.0' or higher"},
    { KmnCompilerMessages::ERROR_KeyboardVersionFormatInvalid                  , "KeyboardVersion format is invalid, expecting dot-separated integers"},
    { KmnCompilerMessages::ERROR_ContextExHasInvalidOffset                     , "context() statement has offset out of range"},
    { KmnCompilerMessages::ERROR_90FeatureOnlyEmbedCSS                         , "Embedding CSS requires store(version) '9.0' or higher"},
    { KmnCompilerMessages::ERROR_90FeatureOnlyTargets                          , "TARGETS system store requires store(version) '9.0' or higher"},
    { KmnCompilerMessages::ERROR_ContextAndIndexInvalidInMatchNomatch          , "context and index statements cannot be used in a match or nomatch statement"},
    { KmnCompilerMessages::ERROR_140FeatureOnlyContextAndNotAnyWeb             , "For web and touch platforms, context() statement referring to notany() requires store(version) '14.0' or higher"},
    { KmnCompilerMessages::ERROR_ExpansionMustFollowCharacterOrVKey            , "An expansion must follow a character or a virtual key"},
    { KmnCompilerMessages::ERROR_VKeyExpansionMustBeFollowedByVKey             , "A virtual key expansion must be terminated by a virtual key"},
    { KmnCompilerMessages::ERROR_CharacterExpansionMustBeFollowedByCharacter   , "A character expansion must be terminated by a character key"},
    { KmnCompilerMessages::ERROR_VKeyExpansionMustUseConsistentShift           , "A virtual key expansion must use the same shift state for both terminators"},
    { KmnCompilerMessages::ERROR_ExpansionMustBePositive                       , "An expansion must have positive difference (i.e. A-Z, not Z-A)"},
    { KmnCompilerMessages::ERROR_CasedKeysMustContainOnlyVirtualKeys           , "The &CasedKeys system store must contain only virtual keys or characters found on a US English keyboard"},
    { KmnCompilerMessages::ERROR_CasedKeysMustNotIncludeShiftStates            , "The &CasedKeys system store must not include shift states"},
    { KmnCompilerMessages::ERROR_CasedKeysNotSupportedWithMnemonicLayout       , "The &CasedKeys system store is not supported with mnemonic layouts"},
    { KmnCompilerMessages::ERROR_CannotUseReadWriteGroupFromReadonlyGroup      , "Group used from a readonly group must also be readonly"},
    { KmnCompilerMessages::ERROR_StatementNotPermittedInReadonlyGroup          , "Statement is not permitted in output of readonly group"},
    { KmnCompilerMessages::ERROR_OutputInReadonlyGroup                         , "Output is not permitted in a readonly group"},
    { KmnCompilerMessages::ERROR_NewContextGroupMustBeReadonly                 , "Group used in begin newContext must be readonly"},
    { KmnCompilerMessages::ERROR_PostKeystrokeGroupMustBeReadonly              , "Group used in begin postKeystroke must be readonly"},
    { KmnCompilerMessages::ERROR_DuplicateGroup                                , "A group with this name has already been defined."},
    { KmnCompilerMessages::ERROR_DuplicateStore                                , "A store with this name has already been defined."},
    { KmnCompilerMessages::ERROR_RepeatedBegin                                 , "Begin has already been set"},
    { KmnCompilerMessages::ERROR_VirtualKeyInContext                           , "Virtual keys are not permitted in context"},
    { KmnCompilerMessages::ERROR_OutsTooLong                                   , "Store cannot be inserted with outs() as it makes the extended string too long" },
    { KmnCompilerMessages::ERROR_ExtendedStringTooLong                         , "Extended string is too long" },
    { KmnCompilerMessages::ERROR_VirtualKeyExpansionTooLong                    , "Virtual key expansion is too large" },
    { KmnCompilerMessages::ERROR_CharacterRangeTooLong                         , "Character range is too large and cannot be expanded" },
    { KmnCompilerMessages::ERROR_NonBMPCharactersNotSupportedInKeySection      , "Characters with codepoints over U+FFFF are not supported in the key part of the rule" },

    { KmnCompilerMessages::HINT_UnreachableRule                              , "This rule will never be matched as another rule takes precedence"},
    { KmnCompilerMessages::HINT_NonUnicodeFile                               , "Keyman Developer has detected that the file has ANSI encoding. Consider converting this file to UTF-8"},
    { KmnCompilerMessages::HINT_IndexStoreLong                               , "The store referenced in index() is longer than the store referenced in any()"},

    { KmnCompilerMessages::WARN_TooManyWarnings                              , "Too many warnings or errors"},
    { KmnCompilerMessages::WARN_OldVersion                                   , "The keyboard file is an old version"},
    { KmnCompilerMessages::WARN_BitmapNotUsed                                , "The 'bitmaps' statement is obsolete and only the first bitmap referred to will be used, you should use 'bitmap'."},
    { KmnCompilerMessages::WARN_CustomLanguagesNotSupported                  , "Languages over 0x1FF, 0x1F are not supported correctly by Windows. You should use no LANGUAGE line instead."},
    { KmnCompilerMessages::WARN_KeyBadLength                                 , "There are too many characters in the keystroke part of the rule."},
    { KmnCompilerMessages::WARN_IndexStoreShort                              , "The store referenced in index() is shorter than the store referenced in any()"},
    { KmnCompilerMessages::WARN_UnicodeInANSIGroup                           , "A Unicode character was found in an ANSI group"},
    { KmnCompilerMessages::WARN_ANSIInUnicodeGroup                           , "An ANSI character was found in a Unicode group"},
    { KmnCompilerMessages::WARN_UnicodeSurrogateUsed                         , "A Unicode surrogate character was found. You should use Unicode scalar values to represent values > U+FFFF"},
    { KmnCompilerMessages::WARN_ReservedCharacter                            , "A Unicode character was found that should not be used"},
    { KmnCompilerMessages::INFO_Info                                         , "Information"},
    { KmnCompilerMessages::WARN_VirtualKeyWithMnemonicLayout                 , "Virtual key used instead of virtual character key with a mnemonic layout"},
    { KmnCompilerMessages::WARN_VirtualCharKeyWithPositionalLayout           , "Virtual character key used with a positional layout instead of mnemonic layout"},
    { KmnCompilerMessages::WARN_StoreAlreadyUsedAsOptionOrCall               , "Store already used as an option or in a call statement and should not be used as a normal store"},
    { KmnCompilerMessages::WARN_StoreAlreadyUsedAsStoreOrCall                , "Store already used as a normal store or in a call statement and should not be used as an option"},
    { KmnCompilerMessages::WARN_StoreAlreadyUsedAsStoreOrOption              , "Store already used as a normal store or as an option and should not be used in a call statement"},
    { KmnCompilerMessages::WARN_PunctuationInEthnologueCode                  , "Punctuation should not be used to separate Ethnologue codes; instead use spaces"},
    { KmnCompilerMessages::WARN_PlatformNotInTargets                         , "The specified platform is not a target platform"},
    { KmnCompilerMessages::WARN_HeaderStatementIsDeprecated                  , "Header statements are deprecated; use instead the equivalent system store"},
    { KmnCompilerMessages::WARN_UseNotLastStatementInRule                    , "A rule with use() statements in the output should not have other content following the use() statements"},
    { KmnCompilerMessages::WARN_KVKFileIsInSourceFormat                      , ".kvk file should be binary but is an XML file"},
    { KmnCompilerMessages::WARN_DontMixChiralAndNonChiralModifiers           , "Don't mix the use of left/right modifiers with non-left/right modifiers in the same platform"},
    { KmnCompilerMessages::WARN_MixingLeftAndRightModifiers                  , "Left and right modifiers should not both be used in the same rule"},
    { KmnCompilerMessages::WARN_LanguageHeadersDeprecatedInKeyman10          , "This language header has been deprecated in Keyman 10. Instead, add language metadata in the package file"},
    { KmnCompilerMessages::WARN_HotkeyHasInvalidModifier                     , "Hotkey has modifiers that are not supported. Use only SHIFT, CTRL and ALT"},
    { KmnCompilerMessages::WARN_NulNotFirstStatementInContext                , "nul must be the first statement in the context"},
    { KmnCompilerMessages::WARN_IfShouldBeAtStartOfContext                   , "if, platform and baselayout should be at start of context (after nul, if present)"},
    { KmnCompilerMessages::WARN_KeyShouldIncludeNCaps                        , "Other rules which reference this key include CAPS or NCAPS modifiers, so this rule must include NCAPS modifier to avoid inconsistent matches"},
    { KmnCompilerMessages::WARN_VirtualKeyInOutput                           , "Virtual keys are not supported in output"},

    { 0, nullptr }
};

const KMX_CHAR *GetCompilerErrorString(KMX_DWORD code) {
    return CompilerErrorMap[code];
}
